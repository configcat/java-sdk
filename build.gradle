import com.vanniktech.maven.publish.SonatypeHost

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    alias(libs.plugins.sonarqube)
    id "java"
    id 'java-library'
    id "jacoco"
    alias(libs.plugins.mavenPublish)
}

ext {
    buildNumber = System.getProperty("build.number")
    isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
}

group = "com.configcat"
version = "${version}" + (isSnapshot ? "-SNAPSHOT" : "")

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api(libs.okhttp)
    api(libs.okio)
    api(libs.slf4j.api)
    api(libs.gson)
    api(libs.commons.codec)
    api(libs.semantic.version)
    testImplementation(libs.junit.jupiter.api)
    testImplementation(libs.logback.classic)
    testImplementation(libs.logback.core)
    testImplementation(libs.mockwebserver)
    testImplementation(libs.mockito.core)
    testImplementation(libs.junit.jupiter.params)
    testRuntimeOnly(libs.junit.jupiter.engine)
    testRuntimeOnly(libs.junit.vintage.engine)
}

jar {
    manifest {
        attributes("Implementation-Version": archiveVersion)
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "configcat_java-sdk"
        property "sonar.projectName", "java-sdk"
        property "sonar.projectVersion", "${version}-${buildNumber}"
        property "sonar.organization", "configcat"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java/com/configcat"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.named("jacocoTestReport", JacocoReport) {
    dependsOn test
    executionData test
    sourceSets sourceSets.main
    reports {
        xml.required.set(true)
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.required.set(false)
        csv.required.set(false)
    }
}

tasks.named("check") {
    it.dependsOn(tasks.named("jacocoTestReport"))
}

extensions.getByType(JavaPluginExtension).with {
    withJavadocJar()
    withSourcesJar()
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)

    def signingInMemoryKey = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKey")
    def signingInMemoryKeyPassword = findProperty("ORG_GRADLE_PROJECT_signingInMemoryKeyPassword")
    if (signingInMemoryKey && signingInMemoryKeyPassword) {
        signAllPublications()
    }

    coordinates(project.group as String, project.name, project.version as String)

    pom {
        name.set("ConfigCat Java SDK")
        description.set("Java SDK for ConfigCat, a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments.")
        url.set("https://github.com/configcat/java-sdk")
        licenses {
            license {
                name.set("MIT License")
                url.set("https://raw.githubusercontent.com/configcat/java-sdk/master/LICENSE")
                distribution.set("repo")
            }
        }
        scm {
            connection.set("scm:git:git://github.com/configcat/java-sdk.git")
            developerConnection.set("scm:git:ssh:git@github.com:configcat/java-sdk.git")
            url.set("https://github.com/configcat/java-sdk")
        }
        developers {
            developer {
                id.set("configcat")
                name.set("ConfigCat")
                email.set("developer@configcat.com")
            }
        }
        organization {
            url.set("https://configcat.com")
            name.set("ConfigCat")
        }
    }
}