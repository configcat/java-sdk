buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.sonarqube" version "3.1.1"
    id "java"
    id 'java-library'
    id "signing"
    id "maven-publish"
    id "jacoco"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

ext {
    buildNumber = System.getProperty("build.number")
    isSnapshot = Boolean.valueOf(System.getProperty("snapshot"))
}

group = "com.configcat"
version = "${version}" + (isSnapshot ? "-SNAPSHOT" : "")

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    api 'com.squareup.okhttp3:okhttp:4.10.0'
    api 'org.slf4j:slf4j-api:1.7.36'
    api 'com.google.code.gson:gson:2.9.0'
    api 'commons-codec:commons-codec:1.15'
    api 'de.skuzzle:semantic-version:2.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
    testImplementation 'ch.qos.logback:logback-classic:1.3.11'
    testImplementation 'ch.qos.logback:logback-core:1.3.11'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
    testImplementation 'org.mockito:mockito-core:4.2.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.8.0'
}

jar {
    manifest {
        attributes("Implementation-Version": archiveVersion)
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "configcat_java-sdk"
        property "sonar.projectName", "java-sdk"
        property "sonar.projectVersion", "${version}-${buildNumber}"
        property "sonar.organization", "configcat"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sources", "src/main/java/com/configcat"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/report.xml"
    }
}

jacoco {
    toolVersion = "0.8.6"
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}

tasks.named("jacocoTestReport", JacocoReport) {
    dependsOn test
    executionData test
    sourceSets sourceSets.main
    reports {
        xml.required.set(true)
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.required.set(false)
        csv.required.set(false)
    }
}

tasks.named("check") {
    it.dependsOn(tasks.named("jacocoTestReport"))
}

extensions.getByType(JavaPluginExtension).with {
    withJavadocJar()
    withSourcesJar()
}

def publishing = extensions.getByType(PublishingExtension)
publishing.repositories {
    maven {
        credentials {
            username findProperty('OSSRH_USERNAME') as String
            password findProperty('OSSRH_PASSWORD') as String
        }

        def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
        def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
        url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
    }
}

def publication = publishing.publications.create("main", MavenPublication) {
    from(components.getByName("java"))

    pom {
        name.set("ConfigCat Java SDK")
        description.set("Java SDK for ConfigCat, a feature flag, feature toggle, and configuration management service. That lets you launch new features and change your software configuration remotely without actually (re)deploying code. ConfigCat even helps you do controlled roll-outs like canary releases and blue-green deployments.")
        url.set("https://github.com/configcat/java-sdk")
        licenses {
            license {
                name.set("MIT License")
                url.set("https://raw.githubusercontent.com/configcat/java-sdk/master/LICENSE")
                distribution.set("repo")
            }
        }
        scm {
            connection.set("scm:git:git://github.com/configcat/java-sdk.git")
            developerConnection.set("scm:git:ssh:git@github.com:configcat/java-sdk.git")
            url.set("https://github.com/configcat/java-sdk")
        }
        developers {
            developer {
                id.set("configcat")
                name.set("ConfigCat")
                email.set("developer@configcat.com")
            }
        }
        organization {
            url.set("https://configcat.com")
            name.set("ConfigCat")
        }
    }
}

signing {
    def signingKey = findProperty("SIGNING_KEY")
    def signingPassphrase = findProperty("SIGNING_PASSPHRASE")
    if (signingKey && signingPassphrase) {
        useInMemoryPgpKeys(signingKey as String, signingPassphrase as String)
        sign publication
    }
}
